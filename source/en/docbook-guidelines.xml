<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter [
	<!ENTITY % allent SYSTEM "http://www.w3.org/2003/entities/2007/w3centities-f.ent">
	%allent;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en" 
         xmlns:xlink="http://www.w3.org/1999/xlink" 
         xmlns:svg="http://www.w3.org/2000/svg"
         xml:id="docbook-guidelines">
	<title>DocBook 5 XML Markup Guidelines</title>
	<para>Here are some general markup guidelines and instructions that you may find helpful while writing your manuscript in DocBook.  If you have any questions about what markup to use for a particular element, or whether our toolchain supports a specific type of markup, please contact toolsreq@oreilly.com.</para>
	<section>
		<title>Keep it simple</title>
		<para>"Keep it simple" sounds a bit silly when referring to something as complex as DoCBook, but the point here is that even though DocBook offers over 400 elements, you'll likely need only a fraction of them. For example, you can safely stay away from the <literal>confsponsor</literal>, <literal>msgsub</literal> and <literal>seriesvolnums</literal> elements.  DocBook is meant to be comprehensive across a universe of technical documentation.  We're only dealing with a subset: content meant for expression in an O'Reilly title.  Practiaclly speaking, you'll mostlu use elements very similar to the standard HTML elements, like <literal>itemizedlist</literal> and <literal>table</literal>.</para>
		<para><xref>common elements</xref> covers some of the commonly used DocBook elements in O'Reilly books.</para>
		<sidebar>
			<title>Can I CHange the Appearance of Elements in My Book?</title>
			<para>We have developed our series stulesheets according to O'Reilly house style and the design standards for each series.  If something isn't showing up as you'd expect in your PDF, or if you want to know if it's feasible to make a cistomization (after consulting with your editor on house style), please contact <email>toolsreq@orielly.com</email>.</para>
		</sidebar>
		<section>
			<title>Using Elements Correctly</title>
			<para>For XML to be valid, it must not only be well-formed *which means that all the start and end tags match), but also must have all the tags in the proper hierarchy according to the associated DTD (in our case, the DocBook 5.0  DTD).  The tag at the top of the hierarchy is called the root element.  For a book, <literal>&lt;book&gt;</literal> would be your root element, which would contain <literal>&lt;part&gt;</literal> or <literal>&lt;chapter&gt;</literal> children, for example.  Tags like <literal>&lt;chapter&gt;</literal> must be nested within <literal>&lt;book&gt;</literal>, and a <literal>&lt;sect3&gt;</literal> cannot be directly nested within a <literal>&lt;sect1&gt;</literal>; it would have to be within a <literal>&lt;sect2&gt;</literal>.  Reserved tags or improper nesting will return invalid DocBook files.</para>
			<note>
				<para>Once nice feature of using an XML editor such as XXE is that it will not allow you to move, delete, or add elements in a way that doesn't follow the DTD hierarchy.</para>
			</note>
			<sidebar>
				<title>Tag Versus Element</title>
				<para>The words "tag" and "element" are sometimes used interchangeably, but there is a distinction.  For example, <literal>&lt;chapter&gt;</literal> is a tag that indicates the start of a <literal>chapter</literal> element. For the XML document to be well-formed, it must contain an end tag, <literal>&lt;/chapter&gt;</literal>.</para>
				<para>Some tags are self-contained and stand alone as complete elements, without the need for separate end tags.  For example, <literal>&lt;xref linkend="foo" /&gt;</literal> is a self-contained tag&#x2014;note the <literal>/&gt;</literal> marker that closes it.</para>
			</sidebar>
		</section>
		<section>
			<title>Sample Markup and PDFs</title>
			<para>This document uses the same DocBook markup as our books, so you can use it as a model for your own manuscript. <xref>common elements</xref> provides a close look at some of the more frequently used elements in O'Reilly books.  In addition, please check out some book samples we have posted, which are available at the URL below.  Note that we often put a README (text) file in each directory to give you a bit of guidance on what is where, and generally it's  best to take a look at the PDF version for additional commentary before delving into the XML.</para>
			<link xlink:href="https:/github.com/radiodoc/docbook-sample/"/>
			<note>
				<para>If the tools team has already given you SVN credentials (mentioned in "Using an O'Reilly SVN repository"), you should use those instead of guest so that your browser/client doesn't cache guest and later prevent you from accessing your own repo.</para>
			</note>
			<para>The samples directory contains the following skeleton files, if you need them:</para>
				<itemizedlist>
					<listitem>
						<para>afterword.xml</para>
					</listitem>		
					<listitem>
						<para>appa.xml</para>
					</listitem>		
					<listitem>
						<para>book.xml</para>
					</listitem>		
					<listitem>
						<para>ch01.xml</para>
					</listitem>		
					<listitem>
						<para>dedication.xml</para>
					</listitem>		
					<listitem>
						<para>foreword.xml</para>
					</listitem>		
					<listitem>
						<para>part1.xml</para>
					</listitem>		
					<listitem>
						<para>preface.xml</para>
					</listitem>		
				</itemizedlist>
			<para>please contact toolsreq@oreilly.com if you have any questions about using these files.</para>
			<para>The samples directory also contains guidelines for using more complex markup, including:</para>
			<itemizedlist>
				<listitem>
					<para>RefEntry markup/rendering</para>
				</listitem>
			</itemizedlist>
			<sidebar>
				<title>The Elements in My PDFs Don't Look Like the Ones in this Document.</title>
				<para>The rendered version of this document is an example of I'Reillu's Animal Guide series template, you may be working in a different series, such as Theory of practise, nutshell, cookbook, or pocket referecne</para>
			</sidebar>
		</section>
	</section>
	<section>
		<title>Organising your files</title>
		<para>As you will see in the book.xml file, that O'Reilly provides for you, the book file contains just the book metadata and no actual content.  Each chapter is its own full DocBook document with its own <literal>DOCTYPE</literal> declaration, which makes validation easier.</para>
		<note>
			<para>This section discusses the files as we structure and name them once they are submitted to Production.  But when you are working on them, you can structure and name them in any way that's convenient for you.  All that matters is that you have a valid book.xml&mdash;whether it's a monolithic file you edit directly, generate from a custom Makefile, etc.</para>
		</note>
		<para>Once you check out the template files from your SVN repository (<xref>docbook and subversion</xref>), you can open the ch01.xml file and begin typing your first paragraph.  The basic DOCTYPE  and other metadata will already be in the book.xml for you, so you can concentrate more on writing your book and less on XML markup.</para>
		<section>
			<title>Adding Chapters to the Book</title>
			<para>The <filename>book.xml</filename> file includes information pertaning to chich files compromise the book and the order in which they should appear:</para>
			<programlisting language="xml"><![CDATA[
<?xml version="1.0"?>
<!DOCTYPE book>
<book>
<title>Wikipedia:  The missing manual</title>
<xi:include href="bookinfo.xml" />
<xi:include href="ch00.xml" />
<xi:include href="ch01.xml" />
<!-- The rest of the chapter files are listed here -->
<xi:include href="ch21.xml" />
<xi:include href="appa.xml" />
<xi:include href="appb.xml" />
<xi:include href="appc.xml" />
</book>
			]]></programlisting>
			<para>After you complete your first chapter and save it, you can create a new file Chapter 2, modelled on your Chapter 1 file.  Name your new chapter&mdash;ch02.xml is O'Reilly's naming convention&mdash;and then reference and include this chapter in the book.xml file that is your book directory, using an XInclude as follows:</para>
			<programlisting language="xml"></programlisting>
		</section>
		<section>
			<title>Dividing the Book into Parts</title>
			<para>If you want to group your chapters into parts, grab a skeleton part file here:</para>
			<para>Then add your chapters to the appropriate partN.cml file instead of the book.xml file.</para>
		</section>
		<section>
			<title>Adding a Foreword and/or an Afterword</title>
			<para></para>
		</section>
		<section>
			<title>Using sections</title>
			<para>Just as the book is made up of chapters, each chapter is made up of sections (though chapter files do not necessarilly use XIncludes).  Please use <literal>section</literal> elements rather than <literal>sect1</literal>, <literal>sect2</literal> and <literal>sect3</literal> elements, to structure your chapter.  Typically the first two levels will appeaer in the ToC.</para>
			<para>The basic chapter structure looks something like this:</para>
			<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" 
         xmlns:xlink="http://www.w3.org/1999/xlink" 
         xmlns:svg="http://www.w3.org/2000/svg"
         xml:id="chapter-id">
	<title>Chapter title here</title>
	<section xml:id="section-id">
		<title>Sect1 title here</title>
		<para>Text goes here...</para>
		<section xml:id="section-id">
			<title>Sect2 title here</title>
			<para>Text goes here...</para>
			<section xml:id="section-id">
				<title>Sect2 title here</title>
				<para>Text goes here...</para>
			</section>
		</section>
	</section>
</chapter>
			]]></programlisting>
			<para>note the <literal>para</literal>s between sections.  Per O'Reilly house style, we ask that you don't add a section directly after the previous section's title with no <literal>para</literal> or other element in between (though doing so isn't invalid). In other words, don't do this:</para>
			<programlisting language="xml"><![CDATA[
<section xml:id="section-id">
	<title>Sect1 title here</title>
	<section xml:id="section-id">
		<title>Sect2 title here</title>
		<para>Text goes here...</para>
	</section>
</section>
			]]></programlisting>
			<note>
				<para>For a complete list of O'Reilly's style conventions, including proper heading and title capitalization, consult the O'Reilly Stylesheet and Word list.  Also keep in mind that except in code listings, there should be no blank or empty lines in your XML documents.</para>
			</note>
			<section>
				<title>Fourth level sections</title>
				<para>You may also use a fourth level (<literal>sect4</literal> equivalent) section, although these are much less common in O'Reilly books.  The title renders inline, with an autogenerated period following it, rather than as a separate heading.</para>
				<para>Here's how it renders:</para>
				<section>
					<title>Example of fourth level section</title>
					<para>This is a paragraph inside a fourth level section.</para>
				</section>
			</section>
		</section>
		<section>
			<title>Creating cross-references</title>
			<para>All references to titled block elements and book components&mdash;figures, tables, examples, sections, chapters, parts, etc.&mdash;should be marked up as <literal>xref</literal>sm not entered as plain text. <literal>xref</literal> markup will become a live hyperlink to the target in online versions, and will automatically update if you move numbered elements (figures, chapters, etc.) around while editing.  To insert an <literal>xref</literal> follow these steps:</para>
			<procedure>
				<step>
					<para>Note the <literal>xml:id</literal> of the element you are referencing.  If the element does not have an <literal>xml:id</literal>, you will need to add one.  For the book to be valid, <literal>xml:id</literal> attributes must be unique across the entire book, have no spaces, and not start with a number.  For example, a figure <literal>xml:id</literal> looks like this:</para>
					<programlisting language="xml">
&lt;figure xml:id="foo"&gt;
					</programlisting>
				</step>
				<step>
					<para>Once you have the <literal>xml:id</literal>, you can insert an <literal>xref</literal> element that references it via a <literal>linkend</literal> attribute, like so:</para>
					<programlisting language="xml">
&lt;xref linkend="foo" /&gt;
					</programlisting>
				</step>
			</procedure>
			<note>
				<para>You cannot use the word "inherit" as an <literal>xml:id</literal>.  It won't render properly in the PDF.</para>
			</note>
			<para>The following table shows examples of <tag>xref</tag> markup and rendering for various elements.</para>
			<informaltable>
				<tgroup cols="3">
					<thead>
						<row>
							<entry>Element to be referenced</entry>
							<entry>xref markup</entry>
							<entry>xref rendering</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>&lt;section xml:id="keep-it-simple"&gt;</entry>
							<entry>&lt;xref linkend="keep-it-simple" /&gt;</entry>
							<entry>"Keep it Simple" on page 17</entry>
						</row>
						<row>
							<entry>&lt;chapter xml:id="setting-up-your-xml-files"&gt;</entry>
							<entry>&lt;xref linkend="setting-up-your-xml-files" /&gt;</entry>
							<entry>Chapter 2</entry>
						</row>
						<row>
							<entry>&lt;figure xml:id="svn-work-flow"&gt;</entry>
							<entry>&lt;xref linkend="svn-work-flow" /&gt;</entry>
							<entry>Figure 2-1</entry>
						</row>
						<row>
							<entry>&lt;example xml:id="sample-example"&gt;</entry>
							<entry>&lt;xref linkend="sample-example" /&gt;</entry>
							<entry>Example 3-3</entry>
						</row>
						<row>
							<entry>&lt;table xml:id="maximum-widths"&gt;</entry>
							<entry>&lt;xref linkend="maximum-widths" /&gt;</entry>
							<entry>Table 3-1</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
			<para>Note that cross-references to terms in a <filename>glossary.xml</filename> use special markup, not <tag>xref</tag>.  See the <filename>/samples/glossary</filename> dir for details.</para>
			<note>
				<para>Do not hardcode titles, labels, or page numbers.  All of these elements of the rendered <tag>xref</tag> are autogenerated: if you move the referenced section to another place in the book or reword a title, the cross-ref will automatically update.</para>
			</note>
		</section>
	</section>
	<section>
		<title>Common Elements</title>
		<para>The following sections describe and provide examples of common DocBook elements in O'Reilly books.  As mentioned earlier, additional markup samples are available here:</para>
		<section>
			<title>Block Elements Versus Inline Elements</title>
			<para>At the paragraph-level, there are two types of elements:</para>
			<variablelist>
				<varlistentry>
					<term>Block elements</term>
					<listitem>
						<para>Usually presented with a paragraph break before and after them.  Block elements may contain character data, inline elements, and possibly other block elements.  Examples include paragraphs, lists, sidebars, and block quotations.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Inline elements</term>
					<listitem>
						<para>Usually distinguished by a font change rather than obvious breaks.  Inline elements may contain character data and possibly other inline elements, but never block elements.  Examples include cross-references, filenames, commands, and URLs.</para>
					</listitem>
				</varlistentry>
			</variablelist>
			<sidebar>
				<title>Avoid Putting Block Elements in &lt;para&gt;s</title>
				<para>To prevent spacing problems in rendering downstream, we'd prefer that you don't put any blck elements within <literal>para</literal>s.  In other words, block elements should come <emphasis>after</emphasis> the closing <literal>&lt;/para&gt;</literal> tag, not be nested within <literal>&lt;para&gt;</literal> tags.  Some of the block elements that we'd like to avoid in <literal>para</literal>s are the following:</para>
				<simplelist>
					<member><tag>blockquote</tag></member>
					<member><tag>calloutlist</tag></member>
					<member><tag>example</tag></member>
					<member><tag>figure</tag></member>
					<member><tag>glosslist</tag></member>
					<member><tag>informalequation</tag></member>
					<member><tag>informalexample</tag></member>
					<member><tag>informalfigure</tag></member>
					<member><tag>informaltable</tag></member>
					<member><tag>itemizedlist</tag></member>
					<member><tag>literallayout</tag></member>
					<member><tag>mediaobject</tag></member>
					<member><tag>note</tag></member>
					<member><tag>orderedlist</tag></member>
					<member><tag>programlisting</tag></member>
					<member><tag>screen</tag></member>
					<member><tag>sidebar</tag></member>
					<member><tag>simplelist</tag></member>
					<member><tag>table</tag></member>
					<member><tag>variablelist</tag></member>
					<member><tag>warning</tag></member>
				</simplelist>
			</sidebar>
		</section>
		<section>
			<title>Inline Font Markup</title>
			<para>Here are the most common inline elements:</para>
			<variablelist>
				<varlistentry>
					<term>
						<citation>&lt;citation&gt;</citation>
					</term>
					<listitem>
						<para>Used in cross/reference syntax. Authors can also use this for hardcoded cross-references to other, non-O'Reilly books.  As in, "See <citation>TITLE</citation>, published by <emphasis>publisher</emphasis></para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<command>&lt;command&gt;</command>
					</term>
					<listitem>
						<para>An executable program, or the entry a user makes to execute a command.  As in, "Compare the two documents using the <command>diff</command> command."</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<email>&lt;email&gt;</email>
					</term>
					<listitem>
						<para>An email address, such as <emphasis>example@oreilly.com</emphasis>. (Note that these will become hyperlinks in online versions, so for fake or example addresses use <literal>&lt;emphasis&gt;</literal> instead.)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<emphasis>&lt;emphasis&gt;</emphasis>
					</term>
					<listitem>
						<para>Provided for use wher eyou would traditionally use italics to emphasise a word or phrase.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<emphasis role="bold">&lt;emphasis role="bold"&gt;</emphasis>
					</term>
					<listitem>
						<para>A general-purpose tag provided for where you would use bold type to emphasise a word of phrase.  (Note that O'Reilly house style prefer italics for emphasis.)</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<emphasis role="roman">&lt;emphasis role="roman"&gt;</emphasis>
					</term>
					<listitem>
						<para>Provided for use within italicized text where you would ordinarilly use italics to emphasize a word of phrase.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<filename>&lt;filename&gt;</filename>
					</term>
					<listitem>
						<para>Used for the name of a file, directory, or path (e.g. <filename>/usr/bin</filename>).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<keycap>&lt;keycap&gt;</keycap>
					</term>
					<listitem>
						<para>The text printed on a physical key on a computer keyboard (e.g. <keycap>Return</keycap>).</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<literal>&lt;literal&gt;</literal>
					</term>
					<listitem>
						<para>Any stretch of text that must appear in <literal>constant width</literal> font.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<replaceable>&lt;replaceable&gt;</replaceable>
					</term>
					<listitem>
						<para>Thext that should be replaced with user-supplied values or by values determined by context. Apperas in <replaceable>constant width italic</replaceable>.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<subscript>&lt;subscript&gt;</subscript>
					</term>
					<listitem>
						<para>A subscript character</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<superscript>&lt;superscript&gt;</superscript>
					</term>
					<listitem>
						<para>A superscript character</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<link>&lt;link&gt;</link>
					</term>
					<listitem>
						<para>Several types of links and various URL markup/rendering options are supported.  See <xref linkend="hyperlinks"/> for more details. (Note that these will become hyperlinks in online versions, so for fake or example URLs, use <literal>&lt;emphasis&gt;</literal> or <literal>&lt;uri&gt;</literal> instead.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>
						<userinput>&lt;userinput&gt;</userinput>
					</term>
					<listitem>
						<para>Data entered by the user, typically at a prompt line. Use with <literal>replaceable</literal> if needed: <userinput>&lt;userinput&gt;&lt;replaceable&gt;&lt;userinput&gt;</userinput></para>
					</listitem>
				</varlistentry>
			</variablelist>

		</section>
		<section>
			<title>Figures</title>
			<para>Figures are similar to tables in that they can be iether formal or informal.  Formal figures have a title *aka caption), an autogenerated numeric label, and (per O'Reilly house style) an explicit cross-reference.  Note that you do not need to number the figure in the XML; the O'Reilly stylesheets autogenerate the number in the fugyre label and in all <tag>xref</tag>s to it.</para>
			<note>
				<para>Formal figures are more common in O'reilly books than informal figures.  Unless you have a special reason for using an unformal figure (e.g., if it's impractical for th eimage to have a title), you should use a formal figure.  <xref>accessibility</xref> for an example of informal figure markup.  It's essentially the same  as a <tag>figure</tag>, but without the <literal>xml:id</literal> attribute or <literal>title</literal> element.</para>
			</note>
			<para>Find more information on how to prepare the image files themselves in the O'Reilly Media Illustration Guidelines.</para>
			<para>Here's an example of proper figure markup:</para>
			<informalexample>
				<programlisting language="xml"><![CDATA[
<figure xml:id="docbook-duck-fig">
	<title>The DocBook duck</title>
	<mediaobject>
		<imageobject>
			<imagedata fileref="figs/docbook-duck.png" format="PNG"
			           width="4.8in" />
		</imageobject>
	</mediaobject>
</figure>			
				]]></programlisting>
			</informalexample>
			<note>
				<para>If you are working on files from an earlier edition of a book, you may see the more complex figure markup we use in Production (it includes a second <tag>imageobject</tag>, among other things).  For any new figures you add, you can stick with the simpler markup shown here.</para>
			</note>
			<para><xref>figure 3-1</xref> shows how the above markup renders.</para>
			<!--
			<figure xml:id="docbook-duck-fig">
				<title>The DocBook duck</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="figs/docbook-duck.png" format="PNG"
						           width="4.8in" />
					</imageobject>
				</mediaobject>
			</figure>			
			-->
			<para>The <literal>width</literal> attribute value in the <tag>imagedata</tag> is a quick way to make large images "fit" within the PDF page while you're writing the manuscript.  (Not that this is strictl optional, and for your own convenience;  it's not necessary for Production.)  <xref>scaling images</xref> next and <xref>inline graphics</xref> for more about image sizing.</para>
			<para>Make sure to add your image files to the git repo (typically in the <filename>figs/</filename> directory).  Then set the fileref and format attributes in the XML markup so that they match the image file names and types exactly.  For example, if an image is named <filename>battery.png</filename> in the <filename>figs/</filename> directory, it should be referenced in tehXML as <filename>figs/battery.png</filename>, not <filename>figs/Battery.png</filename>, and the format should be <literal>PNG</literal>.</para>
			<section>
				<title>Scaling images</title>
				<para>When your book goes into production, O'Reilly's illustration staff will handle processing the images you submit, including scaling them to the appropriate size.  However, for the purposes of generating draft PDF documents, you can scale your images using the <literal>width</literal> attribute of the <tag>imagedata</tag> element, which scales the images proportionally to the width value supplied.  For example, to set a width of 4.8 inches (the maximum width for Animal Guide Books), you'd add a <literal>width</literal> attribute value of <literal>4.8in</literal>.</para>
				<para><xref>table 3.1</xref> contains a list of maximum widths you can use to scale images to fit your book's template.</para>
				<!--
				<table>
					<title>Maximum widths for figures</title>
				</table>
				-->
				<para>For more complete under-the-hood info, see sagehill/imagesizing</para>
			</section>
			<section>
				<title>Inline graphics</title>
				<para>If you need to add an inline graphic (e.g. a small icon that is part of the text), don't use <tag>figure</tag> or <tag>informalfigure</tag>; use an <tag>inlinemediaobject</tag>:</para>
				<programlisting language="xml"><![CDATA[
<inlinemediaobject>
	<imageobject>
		<imagedata fileref="figs/icon-0501.png" width="0.12in"/>
	</imageobject>
</inlinemediaobject>
				]]></programlisting>
				<para>A <literal>width</literal> is required for an <tag>inlinemediaobject</tag> so that the processor knows how much space to allocate for it.  0.12in is a value that usually works well.  You can also ascertain the width of the graphic using a web browser, Adobe Acrobat, or any other program that shows you an image's dimensions.</para>
				<para>Depending on the surrounding text, you may want to add a space before and after the <tag>inlinemediaobject</tag>.  For example, add spaces if the graphic falls between words, like "mumble <literal>ICON</literal> something," but not when it falls within punctuation, like "mumble (<literal>ICON</literal>) something."</para>
			</section>
			<section>
				<title>ASCII art</title>
				<para>ASCII art may be usable, but it does create ambuguities for Tools staff who perform an "intake" on your files when they come into Production, as well as for the illustrators.  Please see detailed guidelines and examples</para>
			</section>
			<section>
				<title>Accessibility</title>
				<para>O'Reilly is commited to making electronic formats of its books accessible to visially impaired readers.  EPUB versions of our titles contain alternative text descriptions for images (in the <literal>alt</literal> attribute of <tag>img</tag> elements) whenever possible.</para>
				<para>By default, for formal <tag>figure</tag> elements, we use the contents of the <tag>title</tag> element as the <literal>alt</literal> text.  However, you can supply your own custom alt text for a <tag>figure</tag> by adding a <tag>textobject</tag> element as a child of the figure's <tag>mediaobject</tag>, and enclosing the <literal>alt</literal> text in a <tag>phrase</tag> element.  Here's an example of the markup to use (<xref>figure 3.2</xref> shows how it renders):</para>
				<programlisting language="xml"><![CDATA[
<figure>
	<title></title>
	<mediaobject>
		<imageobject>
			<imagedata></imagedata>
		</imageobject>
		<textobject>
			<phrase></phrase>
		</textobject>
	</mediaobject>
</figure>
				]]></programlisting>
				<para>For images you include in your book that do not have <tag>title</tag> elements (e.g. <tag>informalfiigure</tag>s and <tag>inlinemediaobject</tag>s, we highly encourage you to supply your own custom <literal>alt</literal> text in <tag>textobject</tag>s.  (By default we use the text "image with no caption" as the <literal>alt</literal> text for <tag>informalfigures</tag> and leave <literal>alt</literal> attributes empty for <tag>inlinemediaobejct</tag>s.)  <xref>example 3-1</xref> show examples of the markup for an <tag>informalfigure</tag> and <tag>inlinemediaobject</tag> with custom <literal>alt</literal> text.</para>
				<example>
					<title>informalfigure with textobject</title>
					<programlisting language="xml"><![CDATA[
<informalfigure>
	<mediaobject>
		<imageobject>
			<imagedata></imagedata>
		</imageobject>
		<textobject>
			<phrase></phrase>
		</textobject>
	</mediaobject>
</informalfigure>
					]]></programlisting>
				</example>
				<figure>
					<title></title>
					<mediaobject>
						<imageobject>
							<imagedata></imagedata>
						</imageobject>
						<textobject>
							<phrase></phrase>
						</textobject>
					</mediaobject>
				</figure>
				<example>
					<title>inlinemedieobject with textobject</title>
				</example>
				<note>
					<para>For some tips on writing good <literal>alt</literal> text, O'reilly's universal design for web applications is a great resource.</para>
				</note>
			</section>
		</section>
		<section>
			<title>Tables</title>
			<para>There are two main types of tables: formal and informal.  If your table requires a description, you expect to refer to it later elsewhere in the text, or it's especially complex, you probably want to use a <tag>table</tag> element.  Otherwise, consider an <tag>informaltable</tag> element.</para>
			<section>
				<title>Formal tables</title>
				<para>Here's the markup for a formal <tag>table</tag> with a heading row:</para>
				<programlisting language="xml"><![CDATA[
<table xml:id="example-table">
	<title>Example formal table</title>
	<tgroup cols="2">
		<thead>
			<row>
				<entry>Heading1</entry>
				<entry>Heading2</entry>
			</row>
		</thead>
		<tbody>
			<row>
				<entry>Text1</entry>
				<entry>Text2</entry>
			</row>
			<row>
				<entry>Text3</entry>
				<entry>Text4</entry>
			</row>
		</tbody>
	</tgroup>
</table>
				]]>
				</programlisting>
				<para><xref linkend="example-table"/> shows how it renders.</para>
				<table xml:id="example-table">
					<title>Example formal table</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>Heading1</entry>
								<entry>Heading2</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>Text1</entry>
								<entry>Text2</entry>
							</row>
							<row>
								<entry>Text3</entry>
								<entry>Text4</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<para>The table's title is different fromits heading row (<tag>thead</tag>).  The title describes the entire table, while the heading row contains information about each column.  A formal table does not always need to have a heading row.</para>
				<para>Tables can get <emphasis>much</emphasis> more complex than this example.  See <link xlink:href="http://www.docbook.org/tdg5/en/html/table.html"/> for details, though note that not everything discussed there will work with our toolchain or conform to O'Reilly's house style (check with your editor about the latter).</para>
			</section>
			<section>
				<title>Informal tables</title>
				<para>the markuo of an <tag>informaltable</tag> is similar to that of a <tag>table</tag>, but it does not have a <tag>title</tag> or (in most cases) <literal>xml:id</literal>.  Here's an example.</para>
				<informaltable>
					<tgroup cols="2">
						<tbody>
							<row>
								<entry>Text1</entry>
								<entry>Text2</entry>
							</row>
							<row>
								<entry>Text3</entry>
								<entry>Text4</entry>
							</row>
						</tbody>
					</tgroup>
				</informaltable>
				<para>This particular informal table doesn't have a heading (no <tag>thead</tag>), but it would be valid to add one.  Also, the bottom rule has been suppressed with the use of a <literal>frame="none"</literal> attribute; see the next section for details on table borders.</para>
				<note>Please check with your editor about O'Reilly house style before overriding table defautls, as table markup can be quite labour-intensive for you or Production staff to change back later on.</note>
			</section>
			<section>
				<title>Table frames and border lines</title>
				<para>You can adjust the apperance of the gridlines and borders in <tag>table</tag>s and <tag>informaltable</tag>s.  By default, in most series a table will render with a gray bottom border.  If you set the <literal>frame</literal> attribtue to <literal>all</literal>, all sides will be black.  If you set the <literal>frame</literal> attribute to <literal>none</literal>, the bottom rule will be suppressed.</para>
				<para>You can control the interiour cell borders by using the <literal>colsep</literal> and <literal>rowsep</literal> attributes on various elements in the table.  Use them to toggle on or off borders, either to the right of (in the case of <literal>colsep</literal>) or below (in the case of <literal>rowsep</literal>) the cells in the element's scope.  For both attributes, a value of <literal>1</literal> draws the rule, and a value of <literal>0</literal> suppresses it.  These don't affect the outer table frame, which is controlled by the <literal>frame</literal> attribute.</para>
			</section>
		</section>
		<section>
			<title>Lists</title>
			<para>There are four common types of lists.  The O'Reilly Stylesheet and word list has more details about when to use them, but here's the markup and an example of each.</para>
		</section>
		<section>
			<title>Notes, Warnings, and Sidebars</title>
			<para></para>
			<note>
				<para>By using the monitor function, enabled from the 
					<keycap>&#x25b2;<alt>up</alt></keycap>
					or
					<keycap>&#x25bc;<alt>down</alt></keycap>
					<inlinemediaobject>
						<imageobject>
							<imagedata contentdepth="0.9em" format="png" fileref="figs/key-star.svg.png"/>
						</imageobject>
						<textobject>
							<phrase>Star</phrase>
						</textobject>
					</inlinemediaobject>,
					key below the PTT, you can more easily adjust your volume by adjusting it to the un-squelched static.</para>
			</note>
		</section>
		<section>
			<title>Hyperlinks</title>
			<para></para>
		</section>
		<section>
			<title>Footnotes</title>
			<para></para>
		</section>
		<section>
			<title>Index Tags</title>
			<para></para>
		</section>
	</section>
	<section>
		<title>Expressing Code in DocBook</title>
		<para></para>
		<section>
			<title>Examples and programlistings</title>
			<programlisting language="c">
bool set_context(sds json)
{
	int err, ctx_size = sizeof(ctx) / sizeof(ctx[0]);
	if ((err = parse_json(json, strlen(json), ctx, ctx_size)) > 0) {
		return true;
	} else {
		switch (err) {
			case JSON_STRING_INVALID:
				fputs("JSON string invalid", stderr);
				break;
			case JSON_STRING_INCOMPLETE:
				fputs("JSON string incomplete", stderr);
				break;
			case JSON_TOKEN_ARRAY_TOO_SMALL:
				fputs("Token array too small", stderr);
				break;
		}
		return false;
	}
}
			</programlisting>
		</section>
		<section>
			<title>Caveats about verbatim environments</title>
			<para></para>
		</section>
		<section>
			<title>Annotating your code</title>
			<para></para>
		</section>
		<section>
			<title>Syntax Highlighting</title>
			<para></para>
		</section>
	</section>
	<section>
		<title>Unicode for Special Characters</title>
		<para>For special or nonstandard keyboard characters, use Unicode. The following table provides the values for some common characters; for all others, use the <link xlink:href="http://www.fileformat.info/info/unicode/char/search.htm">Unicode Character Search</link> (but keep in mind that we may not have fonts for more exotic characters; send an email to toolseq@oreilly.com if you have questions). If you're using XMLmind with the ORM XXE Customizations file, most of these characters have shortcuts, and others are available via the Characters panel.</para>
		<para>To add a Unicode character directly to XML in a text editor, use the entity <literal>&amp;#x<replaceable>CODEPOINT</replaceable>;</literal>, where <replaceable>CODEPOINT</replaceable> is the four-digit hexadecimal number after U+ (e.g. for U+20A0, enter <literal>&amp;#x20A0;</literal>). LEtters that are part of the codepoint may be entered as either upper- or lowercase (i.e. <literal>&amp;#x03bb;</literal> is the same as <literal>&amp;#x03BB;</literal>), but the x between the # symbol and the codepoint must be lowercase.</para>
		<informaltable>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Character</entry>
						<entry>Unicode value (hexadecimal codepoint)</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>&#x2014; (Em Dash)</entry>
						<entry>U+2014</entry>
					</row>
					<row>
						<entry>&#x2013; (En Dash)</entry>
						<entry>U+2013</entry>
					</row>
					<row>
						<entry>&#x201C; (Curly Left Double Quotation Mark)</entry>
						<entry>U+201C</entry>
					</row>
					<row>
						<entry>&#x201D; (Curly Right Double Quotation Mark)</entry>
						<entry>U+201D</entry>
					</row>
					<row>
						<entry>&#x2018; (Curly Left Single Quotation Mark)</entry>
						<entry>U+2018</entry>
					</row>
					<row>
						<entry>&#x2019; (Curly Right Single Quotation Mark)</entry>
						<entry>U+2019</entry>
					</row>
					<row>
						<entry>&#x00D7; (MathMultiplier)</entry>
						<entry>U+00D7</entry>
					</row>
					<row>
						<entry>&#x2192; (CharMenuDelim)</entry>
						<entry>U+2192</entry>
					</row>
					<row>
						<entry>&#x20A0; (Euro Currency Symbol)</entry>
						<entry>U+20A0</entry>
					</row>
					<row>
						<entry>&#x2713; (Check mark)</entry>
						<entry>U+2713</entry>
					</row>
					<row>
						<entry>&#x2717; (Ballot X)</entry>
						<entry>U+2717</entry>
					</row>
					<row>
						<entry>&#x2318; (Place Of Interest Sign)</entry>
						<entry>U+2318</entry>
					</row>
					<row>
						<entry>&#x21B5; (Carriage Return Arrow)</entry>
						<entry>U+21B5</entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>
		<section>
			<title>XML Entity Files</title>
			<para>If you use a lot of special characters, you can import entity files into your document like so:</para>
			<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter [
<!ENTITY % isopub SYSTEM 
	"http://www.w3.org/2003/entities/2007/isopub.ent"
>
%isopub;
]>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
         xml:id="chapter-id">
<title>DocBook V5.0 ]]>&amp;<![CDATA[ndash; the superb documentation format</title>
			]]></programlisting>
			<para>The W3C maintains a set of entity definition files.  The file <filename>isopub.ent</filename> contains standard typographic tools such as <literal>&amp;hellip;</literal> and <literal>&amp;mdash;</literal> but no curly quotes, <filename>w3centities-f.ent</filename> is a flattened version that includes all entities.  See <link xlink:href="http://www.w3.org/2003/entities/"/> for a list of available entity files.</para>
		</section>
	</section>
	<section>
		<title>Adding comments to your manuscript</title>
		<para>You have two main options for adding comments to your manuscript: using standard XML comments (<!-- -->) and using the remark element.</para>
		<para>XML comments are particularly useful for commenting out large blocks of text&mdash;for example, text that is under review, or text that you don't currently want to include in your manuscript. In the following example, the entire paragraph is commented out:</para>
		<programlisting language="xml"><![CDATA[
<!-- O'Reilly's mission statement.
<para>O'Reilly  Media spreads the knowledge of innovators thorugh its 
books, online services, magazinesresearch, and conferences.  Since 1978, 
O'Reilly has been a chronicler and catalyst of leading-edge development, 
homing in on the technology trends that really matter and galvanizing 
their adoption by amplifying "faint signals" from the alpha geeks who 
are creating the future.  An active participant in the technolog 
community, the company has a long history of advocacy, meme-making and 
evangelism.</para> -->
		]]></programlisting>
		<para><literal>remark</literal> elements are typically used by authors to direct specific comments to the editor or Production, such as in the following:</para>
		<programlisting language="xml">
&lt;remark&gt;PRODUCTION: Please stet grammatical errors in the following&lt;/remark&gt;

&lt;para&gt;I can haz cheezburger, plz?&lt;/para&gt;
		</programlisting>
		<para>if you have specific comments for Production staff, we would appreciate you formatting them as <literal>remark</literal> elements and starting them with "PRODUCTION", as done above.  This is very helpful in distinguishing comments that should be addressed during Production from other comments directed toward editorial staff or tech reviewers.</para>
		<para>By default, comments are not rendered in your PDF builds.  <xref>displaying comments</xref> describes how to display them.</para>
	</section>
</chapter>
